package com.chohan.biometric.TNA.taServer;

import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;

import com.chohan.common.Log;
import com.itextpdf.awt.DefaultFontMapper;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;


// for adding charts: http://viralpatel.net/blogs/generate-pie-chart-bar-graph-in-pdf-using-itext-jfreechart/
public class PDFReporter {
	
	protected static Log 		log;
	protected  TAServer			server;
	
	protected String 			sOutputFolder;
	protected String 			sOutputFile;
	
	protected static Font catFont 	= new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	protected static Font redFont 	= new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	protected static Font subFont 	= new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	protected static Font smallBold	= new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	
	protected Document document 	= new Document();
	protected static PdfPTable table;
	
public PDFReporter(TAServer server){
	
	log 			= Log.getInstance();
	this.server		= server;
	sOutputFolder	= server.properties.getProperty("report.output.folder");
	
/*	
	String sReportFile		= server.properties.getProperty("report.daily.late.report");
	String sParameterFile	= server.properties.getProperty("report.daily.late.parameter");
	
	// output file name
	Calendar cal = Calendar.getInstance();
	SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd_HHmm");
	String sOutputFile	= "DailyLateReport_" + df.format(cal.getTime()) + ".pdf";
	
	// headers
	String[] sHeaders = {"Employee Attendance Report", "Site: 11", "Employee Id: 465", "Name: Salahuddin Chohan", "Date from: 01-03-2014", "Date to: 30-04-2014"};
	
	// column names
	String[] sColNames = {"Col0", "Col1", "Col2", "Col3", "Col4", "Col5"};
	
	try {
//		Document document = new Document();
		PdfWriter.getInstance(document, new FileOutputStream(sOutputFolder + "/" + sOutputFile));
		document.open();
		addMetaData(document);
		addTitlePage(document);
		addHeaders(sHeaders);
		createTable(sColNames);
		addRows();
		document.add(table);
		//addContent(document);
		document.close();
	} catch (Exception e) {log.log(e, "");}
	
	BarPie();
*/
}

public void init(String sReportName){
	
	// output file name
	Calendar cal = Calendar.getInstance();
	SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd_HHmm");
	sOutputFile	= sReportName + "_" + df.format(cal.getTime()) + ".pdf";
	
	try {
		PdfWriter.getInstance(document, new FileOutputStream(sOutputFolder + sOutputFile));
		document.open();
		addMetaData(document);
		//addTitlePage(document);
	} catch (Exception e) {log.log(e, "");}
}

public void finish(){
	
	try {
		document.add(table);
		document.close();
	} catch (Exception e) {log.log(e, "");}
}

//this extracts data from database
// this should be overridden by subclass
public void getData(){}

//this emails report
//this should be overridden by subclass
public void sendEmail(){
	
}

// iText allows to add metadata to the PDF which can be viewed in your Adobe
// Reader
// under File -> Properties

protected static void addMetaData(Document document) {
	
	document.addTitle("My first PDF");
	document.addSubject("Using iText");
	document.addKeywords("Java, PDF, iText");
	document.addAuthor("Salah Chohan");
	document.addCreator("Salah Chohan");
}

protected static void addTitlePage(Document document) throws DocumentException {
	
	Paragraph preface = new Paragraph();
	// We add one empty line
	addEmptyLine(preface, 1);
	// Lets write a big header
	preface.add(new Paragraph("Title of the document", catFont));

	addEmptyLine(preface, 1);
	// Will create: Report generated by: _name, _date
	preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	        smallBold));
	addEmptyLine(preface, 3);
	preface.add(new Paragraph("This document describes something which is very important ", smallBold));

	addEmptyLine(preface, 8);

	preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
	        redFont));

	document.add(preface);
	// Start a new page
	document.newPage();
}

protected static void addContent(Document document) throws DocumentException {
	
  Anchor anchor = new Anchor("First Chapter", catFont);
  anchor.setName("First Chapter");

  // Second parameter is the number of the chapter
  Chapter catPart = new Chapter(new Paragraph(anchor), 1);

  Paragraph subPara = new Paragraph("Subcategory 1", subFont);
  Section subCatPart = catPart.addSection(subPara);
  subCatPart.add(new Paragraph("Hello"));

  subPara = new Paragraph("Subcategory 2", subFont);
  subCatPart = catPart.addSection(subPara);
  subCatPart.add(new Paragraph("Paragraph 1"));
  subCatPart.add(new Paragraph("Paragraph 2"));
  subCatPart.add(new Paragraph("Paragraph 3"));

  // add a list
  createList(subCatPart);
  Paragraph paragraph = new Paragraph();
  addEmptyLine(paragraph, 5);
  subCatPart.add(paragraph);

  // add a table
  createTable(subCatPart);

  // now add all this to the document
  document.add(catPart);

  // Next section
  anchor = new Anchor("Second Chapter", catFont);
  anchor.setName("Second Chapter");

  // Second parameter is the number of the chapter
  catPart = new Chapter(new Paragraph(anchor), 1);

  subPara = new Paragraph("Subcategory", subFont);
  subCatPart = catPart.addSection(subPara);
  subCatPart.add(new Paragraph("This is a very important message"));

  // now add all this to the document
  document.add(catPart);

}

public void addHeaders(String sHeaders[]) throws DocumentException {
	
	Font font;
	Paragraph para;
	
	font = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD, BaseColor.RED);
	para = new Paragraph();
	
	// Main title
	addEmptyLine(para, 1);
	para.add(new Paragraph(sHeaders[0], font));
	addEmptyLine(para, 1);

	// report headers
	font	= new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	String sLine="";
	for(int i=1; i<sHeaders.length; i++){
		sLine = sLine + '\t' + sHeaders[i];
	}
	para.add(new Paragraph(sLine, font));
	addEmptyLine(para, 2);
	document.add(para);
}

public void addHeaders(String sTitle, Font fontTitle, String sHeaders, Font fontHeader) throws DocumentException {
	
	Paragraph para = new Paragraph();
	
	// Main title
	addEmptyLine(para, 1);
	para.add(new Paragraph(sTitle, fontTitle));
	addEmptyLine(para, 1);

	// report headers
	para.add(new Paragraph(sHeaders, fontHeader));
	addEmptyLine(para, 2);
	document.add(para);
}

public void createTable(String sColNames[]) throws DocumentException {
	
	// add a table
	table = new PdfPTable(sColNames.length);
	PdfPCell c1;
	for(int i=0; i<sColNames.length; i++){
		c1 = new PdfPCell(new Phrase(sColNames[i]));
		c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		table.addCell(c1);
	}
	table.setHeaderRows(1);
	//document.add(table);
}

public void addRows(){
	
	String data[][] = {
			{"1a","1b","1c","1d","1e","1f"},
			{"2a","2b","2c","2d","2e","2f"},
			{"3a","3b","3c","3d","3e","3f"},
			{"4a","4b","4c","4d","4e","4f"},
			{"5a","5b","5c","5d","5e","5f"}
			};
	
	Font font1 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLUE);
	Font font2 = new Font(Font.FontFamily.TIMES_ROMAN, 10, Font.BOLD, BaseColor.RED);
	for(int i=0; i<data.length; i++){
		if(i%2 == 1)
			addRow(data[i], font1);
		else
			addRow(data[i], font2);
	}
}

public void addRow(String sFields[], Font font){
	
	for(int i=0; i<sFields.length; i++){
		table.addCell(new PdfPCell(new Paragraph(sFields[i], font)));
	}
}

public void addRow(Vector<String> arFields, Font font){
	
	for(Object sField : arFields){
		
		table.addCell(new PdfPCell(new Paragraph((String)sField, font)));
	}
}

protected static void createTable(Section subCatPart)
    throws BadElementException {
	
  PdfPTable table = new PdfPTable(3);

  // t.setBorderColor(BaseColor.GRAY);
  // t.setPadding(4);
  // t.setSpacing(4);
  // t.setBorderWidth(1);

  PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
  c1.setHorizontalAlignment(Element.ALIGN_CENTER);
  table.addCell(c1);

  c1 = new PdfPCell(new Phrase("Table Header 2"));
  c1.setHorizontalAlignment(Element.ALIGN_CENTER);
  table.addCell(c1);

  c1 = new PdfPCell(new Phrase("Table Header 3"));
  c1.setHorizontalAlignment(Element.ALIGN_CENTER);
  table.addCell(c1);
  table.setHeaderRows(1);

//  table.addCell("1.0");
//  table.addCell("1.1");
//  table.addCell("1.2");
//  table.addCell("2.1");
//  table.addCell("2.2");
//  table.addCell("2.3");

  subCatPart.add(table);

}

protected static void createList(Section subCatPart) {
  List list = new List(true, false, 10);
  list.add(new ListItem("First point"));
  list.add(new ListItem("Second point"));
  list.add(new ListItem("Third point"));
  subCatPart.add(list);
}

protected static void addEmptyLine(Paragraph paragraph, int number) {
  for (int i = 0; i < number; i++) {
    paragraph.add(new Paragraph(" "));
  }
}

/*
The resulting pdf should look like the following.

4. Formatting your output

Paragraph allows to set the alignment and the indentation. For this example create project "de.vogella.itext.position" similar to the previously created ones. Create the following class "PositionPdf.java".

package de.vogella.itext.position;

import java.io.FileOutputStream;

import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;

public class PositionPdf {
private static String FILE = "PositionPdf.pdf";

public static void main(String[] args) {
  try {
    Document document = new Document();
    PdfWriter.getInstance(document, new FileOutputStream(FILE));
    document.open();
    // Left
    Paragraph paragraph = new Paragraph("This is right aligned text");
    paragraph.setAlignment(Element.ALIGN_RIGHT);
    document.add(paragraph);
    // Centered
    paragraph = new Paragraph("This is centered text");
    paragraph.setAlignment(Element.ALIGN_CENTER);
    document.add(paragraph);
    // Left
    paragraph = new Paragraph("This is left aligned text");
    paragraph.setAlignment(Element.ALIGN_LEFT);
    document.add(paragraph);
    // Left with indentation
    paragraph = new Paragraph("This is left aligned text with indentation");
    paragraph.setAlignment(Element.ALIGN_LEFT);
    paragraph.setIndentationLeft(50);
    document.add(paragraph);

    document.close();
  } catch (Exception e) {
    e.printStackTrace();
  }
}
*/

public static void BarPie() {
    //writeChartToPDF(generateBarChart(), 500, 400, "D:/Projects/TNA/rpt/barchart.pdf");
    //writeChartToPDF(generatePieChart(), 500, 400, "D:/Projects/TNA/rpt/piechart.pdf");
}
public static void writeChartToPDF(JFreeChart chart, int width, int height, String fileName) {
    PdfWriter writer = null;
 
    Document document = new Document();
 
    try {
        writer = PdfWriter.getInstance(document, new FileOutputStream(fileName));
        document.open();
        PdfContentByte contentByte = writer.getDirectContent();
        PdfTemplate template = contentByte.createTemplate(width, height);
        Graphics2D graphics2d = template.createGraphics(width, height, new DefaultFontMapper());
        Rectangle2D rectangle2d = new Rectangle2D.Double(0, 0, width, height);
 
        chart.draw(graphics2d, rectangle2d);
         
        graphics2d.dispose();
        contentByte.addTemplate(template, 0, 0);
 
    } catch (Exception e) {
        e.printStackTrace();
    }
    document.close();
}

public static JFreeChart generatePieChart() {
    DefaultPieDataset dataSet = new DefaultPieDataset();
    dataSet.setValue("China", 19.64);
    dataSet.setValue("India", 17.3);
    dataSet.setValue("United States", 4.54);
    dataSet.setValue("Indonesia", 3.4);
    dataSet.setValue("Brazil", 2.83);
    dataSet.setValue("Pakistan", 2.48);
    dataSet.setValue("Bangladesh", 2.38);

//    JFreeChart chart = ChartFactory.createPieChart(
//            "World Population by countries", dataSet, true, true, false);

//    return chart;
    return null;
}

public static JFreeChart generateBarChart() {
    DefaultCategoryDataset dataSet = new DefaultCategoryDataset();
    dataSet.setValue(791, "Population", "1750 AD");
    dataSet.setValue(978, "Population", "1800 AD");
    dataSet.setValue(1262, "Population", "1850 AD");
    dataSet.setValue(1650, "Population", "1900 AD");
    dataSet.setValue(2519, "Population", "1950 AD");
    dataSet.setValue(6070, "Population", "2000 AD");

//    JFreeChart chart = ChartFactory.createBarChart(
//            "World Population growth", "Year", "Population in millions",
//            dataSet, PlotOrientation.VERTICAL, false, true, false);

//    return chart;
    return null;
}
}
